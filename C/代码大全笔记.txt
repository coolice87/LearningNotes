摘自《代码大全》


				第1章 进入软件创建世界
1、创建活动
它是总体设计和系统测试之间承上启下的工作
它主要包括：详细设计、编码、调试和单元测试
它的其他称谓有：实现、编程等

				第3章 软件创建的先决条件
1、问题定义先决条件
2、需求分析先决条件
     需求详细描述了一个软件系统需要解决的问题，这是找到问题答案的第一步，这项活动也被称作“需求分析”、“需求定义”。
3、结构设计先决条件
（1）主要数据结构：数据结构对系统维护有举足轻重的影响，因而在经过全盘考虑之后，才能选定。数据守恒定律：每一个进入的数据都应该出去，或者与其他数据一道出去，如果它不出去，那它就没有必要进来。
    关键算法、
    主要对象、
    通用功能
    坚固性：指发现错误后，一个系统继续运行的能力。
4、选择编程语言先决条件
5、编程约定：是实现时在给变量和子程序命名、进行格式约定和注释约定时的指导方针。

				第4章 建立子程序的步骤
1、程序设计语言（PDL）：比在代码稍高级的层次上进行设计工作，而不是描述如何用目标语言实现。

				第5章 高质量子程序特点
1、特点：强内聚性、松散耦合性、子程序长度、防错性编程、子程序参数、使用函数、宏子程序。
2、子程序：具有单一功能的可调用的函数。程序中参数个数合理上限应该是7个左右。
3、生成子程序的原因
   降低复杂性、限制了改动带来的影响、隐含顺序、改进性能、进行集中控制、隐含数据结构、隐含全变量等。
4、子程序名称恰当
   对于过程的名字，可以用一个较强的动词带目标的形成
   对于函数名字，可以使用返回值的描述
   避免无意义或者模棱两可的动词。
   名字的长度要符合需要：变量最佳长度9到15个字母，函数最佳长度20到35个字母，一般15到20个字母。
5、强内聚性
   指在一个子程序内部，各种操作之间互相联系的紧密程度。
6、松散耦合性
   指两个子程序之间联系的紧密程度。
7、防错性编程
   使用断言
8、子程序参数
   确保实际参数与形式参数匹配
   按照输入―>修改―>输出的顺序排列参数
   如果几个子程序使用了相似的参数，应按照不变的顺序排列这些参数
   如果向某个子程序传入了一个参数，就要在其中使用；如果不使用，就从子程序接口去掉

					第6章 模块化设计
					第7章 高级结构设计
1、设计层次
层次1：划分成子系统，将系统划分成子系统
层次2：划分成模块，将子系统划分为各个模块
层次3：划分成子程序，每个模块划分成各种功能
层次4：子程序内部的设计，

					第8章 生成数据
1、自建数据类型的准则
（1）建立具有面向功能名称的类型
（2）要避免使用含有已定义变量类型的名称
（3）避免使用已定义类型
（4）不要对已定义类型重新定义
（5）定义替换类型以增强移植性
（6）使用其他类型来建立新类型

					第9章 数据名称
1、缩写使用的总体准则
（1）使用标准的缩写
（2）去掉所有的非大写元音字母（如Computer写成Cmptr，Screen写成Scrn）
（3）使用单词头一个或头几个字母
（4）截掉每个单词一至三个字母后面的其余字母
（5）使用变量名中每一个有典型意义的单词，最多可用三个单词
（6）每个单词的第一个和最后一个字母
（7）去掉无用的后缀――ing,ed等
2、关于缩写建议
用注释表来说明短名称
3、要避免的名称
（1）避免容易产生误会的名称或缩写
（2）命名含义相同或相近的名字

					第10章 变量
1、关于变量作用域的常用准则
（1）尽可能减少作用域
（2）把对某一变量的引用集中放置
2、变量功能单一性
（1）应使每一个变量只具有一个功能
（2）避免使用具有隐含意义的变量
（3）保证所有变量都被使用
3、伴随全局变量的常见问题
（1）对全局数据的疏忽改变
（2）伴随全局变量的奇怪的别名问题
（3）有全局数据的代码重入问题
（4）全局变量会损害模块性和可管理性
4、使用全局变量理由
（1）保存全局数值，有时需要在整个程序中都要用到某些数据
（2）方便产用数据的使用
（3）消除"穿梭"数据
5、怎样降低使用全局数据的危险 
（1）建立使你一眼即可以识别出全局变量的命名约定
（2）建立一个清楚标出所有全局变量的注视表
（3）使用加锁技术来控制对全局变量的存取，登记借出和登记归还

					第11章 基本数据类型
1、减少数据使用错误的措施
（1）避免“奇异数”：指出现在程序中间的不加解释的常数
（2）在需要时可以使用常数“0”或“1”
（3）采取预防被“0”除的措施
（4）避免混合类型比较
2、使用整型数应该牢记的准则
（1）检查整型数相除
（2）检查整型数是否溢出
（3）检查中间数是否溢出
3、浮点数使用时注意点
（1）不要在数量级相差太大的数之间进程加减运算
（2）避免相等比较：应该相等的浮点数事实上往往是不相等的。
（3）防止舍入误差
4、使用字符串时应注意的几个问题
（1）避免“奇异字符和字符串”，奇异字符串指常量字符串。
（2）警戒边界错误
（3）C语言字符串：特别注意字符指针
5、枚举类型
（1）使用枚举类型来提高可读性
（2）使用枚举类型来提高可靠性
（3）使用枚举类型来改善易修改性
（4）用枚举类型来代替逻辑变量
（5）检查无效值
6、数组
在C语言中，使用宏处理数组，提高程序的灵活性
#define ARRAY_LENGTH(x) (sizeof(x)/sizeof(x[0]))
7、使用指针几点建议
（1）把指针操作独立在子程序中
（2）在使用指针之前对它进行检查
（3）释放指针后，把它设为NULL

					第12章 复杂数据类型
1、结构
（1）使用结构化数据来表明数据间的关系
（2）使用结构化数据来简化对成块数据的操作
（3）使用结构化数据来简化参数表
（4）使用结构化数据来降低维护工作量
2、表驱动方法
    表驱动方法常见两个问题：一是如何寻找表中的入口；二是表中存储什么。
3、查找表入口的几种方法
（1）直接存取
（2）间接存取
（3）阶梯存取
4、抽象数据类型
    抽象数据类型是有数据及对数据的操作组成的。
    优点：隐含实现的细节，把改动的影响限制在局部，更容易改进性能，减少修改时犯错误的可能性。

					第13章 顺序程序语句
1、有明确顺序的程序语句
（1）组织代码使它们间的依赖关系明显
（2）子程序的名字应当清晰的表明依赖关系
（3）使用子程序参数使依赖关系明显
（4）注明不明确的依赖关系
2、与顺序无关的程序语句

					第14章 条件语句
1、if语句编写参考点
（1）在代码中，先按正常情况的路径往下编写，然后在写异常情况
（2）在出项等号情况时，一定要弄清程序的流向
（3）把正常情况放在if后面而不是else后面
（4）if语句后跟上一个有意义的语句
2、case语句―选择最有效的方法来组织各种情况
（1）把各种情况按字母或数字顺序组织
（2）把正常情况的事件放在最开始
（3）按出项频率组织情况
3、用case语句该注意的几点
（1）使每种情况对应的执行语句最简单。如果某个情况对应的执行代码显得很复杂，应当把它写成一个子程序然后对应这种情况调用子程序
（2）用缺省语句检查错误

					第16章 少见控制结构
1、怎样用递归
（1）要保证递归能中止
（2）设置安全计数器防止无限递归
（3）递归调用限制在一个子程序里
（4）要注意堆栈

					第17章 常见的控制问题
1、C语言中与0比较的用法
C语言中0有几个用途：它是一个数字量；在字符串中它是一个结束符'\0'，它是地址指针所允许的最小值；在逻辑表达式中它表示假。
（1）隐含的与逻辑变量比较：while(!Done)
（2）数与0比较：while(BaLance != 0)
（3）把字符与结束符比较：while(char != '\0')
（4）把指针与NULL比较：while(poiter == NULL)
2、空语句
指一句中仅有一个分号

					第18章 布局和风格

					第19章 文档
1、外部文档
（1）综合资料：是一个非正式文档，它包含着共开发者在编程中使用的记录
（2）详细设计文档：是底层设计的文档，它描述模块层或程序层的决定，所考虑的选择对象、所选用办法的原因。

